pipeline {
    agent { label 'k8s-agent' }

    environment {
        NAMESPACE = "dev"
        DOCKER_REGISTRY = 'chitaialm/petclinic'
        APP_NAME = "petclinic-${NAMESPACE}"
        VALUES_FILE = "petclinic-chart/values.yaml"
        APPLICATION_FILE = "petclinic-chart/application.yaml"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                checkout scm

                script {
                    // Lấy branch name
                    BRANCH_NAME = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    env.BRANCH_NAME = BRANCH_NAME

                    // Lấy commit hash ngắn
                    COMMIT_HASH = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.COMMIT_HASH = COMMIT_HASH

                    echo "Branch: ${BRANCH_NAME}"
                    echo "Commit: ${COMMIT_HASH}"
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    def serviceMap = [
                        'config-server': '8888',
                        'discovery-server': '8761',
                        'customers-service': '8081',
                        'visits-service': '8082',
                        'vets-service': '8083',
                        'genai-service': '8084',
                        'api-gateway': '8080',
                        'admin-server': '9090'
                    ]

                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    }

                    serviceMap.each { service, port ->
                        def imageName = "${DOCKER_REGISTRY}:spring-petclinic-${service}-${env.BRANCH_NAME}-${env.COMMIT_HASH}"
                        echo "Building Docker image for ${service} → ${imageName}"

                        sh """
                            docker build \
                              --build-arg SERVICE_NAME=spring-petclinic-${service} \
                              --build-arg SERVICE_PORT=${port} \
                              -t ${imageName} .
                        """
                        sh "docker push ${imageName}"
                    }

                    sh "docker logout"
                }
            }
        }

        stage('Update values.yaml') {
            steps {
                script {
                    sh """
                        sed -i 's/commit:.*/commit: ${env.COMMIT_HASH}/g' ${VALUES_FILE}
                        sed -i 's/branch:.*/branch: ${env.BRANCH_NAME}/g' ${VALUES_FILE} || echo "branch: ${env.BRANCH_NAME}" >> ${VALUES_FILE}
                    """
                    echo "Updated values.yaml with branch ${env.BRANCH_NAME} and commit ${env.COMMIT_HASH}"
                }
            }
        }

        stage('Update Application Namespace') {
            steps {
                script {
                    sh "sed -i 's/namespace: .*/namespace: ${NAMESPACE}/g' ${APPLICATION_FILE}"
                    echo "Updated application.yaml with namespace: ${NAMESPACE}"
                }
            }
        }

        stage('Check Application Existence') {
            steps {
                script {
                    def appExists = sh(
                        script: "kubectl get application ${APP_NAME} -n argocd --ignore-not-found",
                        returnStatus: true
                    ) == 0

                    if (!appExists) {
                        echo "Application ${APP_NAME} does not exist. Creating new application..."
                        sh "kubectl apply -f ${APPLICATION_FILE}"
                    } else {
                        echo "Application ${APP_NAME} already exists. Skipping apply."
                    }
                }
            }
        }
    }
}
