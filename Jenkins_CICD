pipeline {
    agent { label 'k8s-agent' }

    parameters {
        string(name: 'tag_name', defaultValue: '', description: 'Git tag from webhook')
    }

    environment {
        NAMESPACE = "staging"
        DOCKER_REGISTRY = 'chitaialm/petclinic'
        APP_NAME = "petclinic-${NAMESPACE}"
        VALUES_FILE = "petclinic-chart/values.yaml"
        APPLICATION_FILE = "application.yaml"
    }

    stages {
        stage('Validate Tag') {
            steps {
                script {
                    def GIT_TAG = params.tag_name?.trim()
                    echo "Webhook tag_name: ${params.tag_name}"
                    echo "GIT_TAG: ${GIT_TAG}"
                    if (!GIT_TAG) {
                        error "No tag provided. This job only runs for tag pushes."
                    }
                }
            }
        }

        stage('Checkout Repository') {
            steps {
                script {
                    def GIT_TAG = params.tag_name?.trim()
                    sh "git fetch --all"
                    sh "git tag -l"
                    sh "git checkout tags/${GIT_TAG}"
                }
            }
        }

        // stage('Build and Push Docker Images') {
        //     steps {
        //         script {
        //             def serviceMap = [
        //                 'config-server': '8888',
        //                 'discovery-server': '8761',
        //                 'customers-service': '8081',
        //                 'visits-service': '8082',
        //                 'vets-service': '8083',
        //                 'genai-service': '8084',
        //                 'api-gateway': '8080',
        //                 'admin-server': '9090'
        //             ]

        //             withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
        //                 sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
        //             }

        //             serviceMap.each { service, port ->
        //                 def imageName = "${DOCKER_REGISTRY}:spring-petclinic-${service}-${params.tag_name}"
        //                 echo "Building Docker image for ${service} â†’ ${imageName}"

        //                 sh """
        //                     docker build \
        //                       --build-arg SERVICE_NAME=spring-petclinic-${service} \
        //                       --build-arg SERVICE_PORT=${port} \
        //                       -t ${imageName} .
        //                 """
        //                 sh "docker push ${imageName}"
        //             }

        //             sh "docker logout"
        //         }
        //     }
        // }

        stage('Update values.yaml') {
            steps {
                script {
                    def tag = params.tag_name?.trim()
                    sh """
                        sed -i 's/commit:.*/commit: ${tag}/g' ${VALUES_FILE}
                    """
                    echo "Updated values.yaml with tag ${tag}"
                    sh """
                        sed -i 's/namespace: .*/namespace: ${NAMESPACE}/g' ${VALUES_FILE}
                    """
                    echo "Updated values.yaml with namespace: ${NAMESPACE}"
                    
                    sh "cat ${VALUES_FILE}"
                }
            }
        }


        stage('Update Application Namespace') {
            steps {
                script {
                    sh "sed -i '/destination:/,/namespace:/s/namespace: .*/namespace: ${NAMESPACE}/' ${APPLICATION_FILE}"
                    echo "Updated application.yaml with namespace: ${NAMESPACE}"
                    sh "cat application.yaml"
                }

            }
        }


        stage('Check Application Existence') {
            steps {
                script {
                    def output = sh(
                        script: "kubectl get application ${APP_NAME} -n argocd --ignore-not-found",
                        returnStdout: true
                    ).trim()

                    if (!output) {
                        echo "Application ${APP_NAME} does not exist. Creating new application..."
                        sh "kubectl apply -f ${APPLICATION_FILE}"
                    } else {
                        echo "Found existing application:\n${output}"
                        echo "Application ${APP_NAME} already exists. Skipping apply."
                    }
                }
            }
        }
    }
}
